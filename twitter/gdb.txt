All defined types:

File go:
Closer });
typedef struct hchan<bool> * <-chan bool;
typedef struct hchan<chan struct {}> * <-chan chan struct {};
typedef struct hchan<net.singleflightResult> * <-chan net.singleflightResult;
typedef struct hchan<time.Time> * <-chan time.Time;
struct []*crypto/tls.cipherSuite;
struct []*crypto/x509.Certificate;
struct []*gopkg.in/yaml%2ev2.node;
struct []*math/big.Int;
struct []*mime/multipart.FileHeader;
struct []*net/http.Cookie;
struct []*net/http.Request;
struct []*net/http.persistConn;
struct []*reflect.rtype;
struct []*regexp.machine;
struct []*regexp.thread;
struct []*regexp/syntax.Regexp;
struct []*runtime._type;
struct []*runtime.g;
struct []*runtime.hchan;
struct []*runtime.timer;
struct []*strings.trieNode;
struct []*sync.Pool;
struct []*unicode.RangeTable;
struct [][2]uint16;
struct [][]*crypto/x509.Certificate;
struct [][][]uint8;
struct [][]int;
struct [][]int32;
struct [][]string;
struct [][]uint32;
struct [][]uint8;
struct []chan<- net.singleflightResult;
struct []compress/flate.literalNode;
struct []crypto/rsa.CRTValue;
struct []crypto/tls.Certificate;
struct []crypto/tls.CurveID;
struct []crypto/tls.signatureAndHash;
struct []crypto/x509.ExtKeyUsage;
struct []crypto/x509.authorityInfoAccess;
struct []crypto/x509.distributionPoint;
struct []crypto/x509.generalSubtree;
struct []crypto/x509.pkcs1AdditionalRSAPrime;
struct []crypto/x509.policyInformation;
struct []crypto/x509/pkix.AttributeTypeAndValue;
struct []crypto/x509/pkix.Extension;
struct []crypto/x509/pkix.RevokedCertificate;
struct []encoding/asn1.ObjectIdentifier;
struct []encoding/json.encoderFunc;
struct []encoding/json.field;
struct []float32;
struct []float64;
struct []func() hash.Hash;
struct []github.com/kurrik/json.Event;
struct []github.com/kurrik/twittergo.Error;
struct []gopkg.in/yaml%2ev2.MapItem;
struct []gopkg.in/yaml%2ev2.fieldInfo;
struct []gopkg.in/yaml%2ev2.yaml_alias_data_t;
struct []gopkg.in/yaml%2ev2.yaml_mark_t;
struct []gopkg.in/yaml%2ev2.yaml_node_item_t;
struct []gopkg.in/yaml%2ev2.yaml_node_pair_t;
struct []gopkg.in/yaml%2ev2.yaml_node_t;
struct []gopkg.in/yaml%2ev2.yaml_parser_state_t;
struct []gopkg.in/yaml%2ev2.yaml_simple_key_t;
struct []gopkg.in/yaml%2ev2.yaml_tag_directive_t;
struct []gopkg.in/yaml%2ev2.yaml_token_t;
struct []int;
struct []int32;
struct []interface {};
struct []io.Reader;
struct []math/big.Word;
struct []math/big.divisor;
struct []net.Addr;
struct []net.IP;
struct []net.Interface;
struct []net.dnsQuestion;
struct []net.dnsRR;
struct []net/http.keyValues;
struct []net/http.sniffSig;
struct []os.FileInfo;
struct []reflect.Value;
struct []reflect.fieldScan;
struct []reflect.imethod;
struct []reflect.method;
struct []reflect.structField;
struct []regexp.entry;
struct []regexp.onePassInst;
struct []regexp/syntax.Inst;
struct []runtime.functab;
struct []runtime.parforthread;
struct []runtime.scase;
struct []strconv.leftCheat;
struct []string;
struct []struct { algo crypto/x509.SignatureAlgorithm; oid encoding/asn1.ObjectIdentifier; pubKeyAlgo crypto/x509.PublicKeyAlgorithm; hash crypto.Hash };
struct []struct { extKeyUsage crypto/x509.ExtKeyUsage; oid encoding/asn1.ObjectIdentifier };
struct []struct { laddr net.TCPAddr; value int; ok bool };
struct []struct { v interface {}; tag string; l []string };
struct []sync.poolLocal;
struct []syscall.RoutingMessage;
struct []syscall.Sockaddr;
struct []syscall._C_int;
struct []time.zone;
struct []time.zoneTrans;
struct []uint16;
struct []uint32;
struct []uint64;
struct []uint8;
struct []uintptr;
struct []unicode.CaseRange;
struct []unicode.Range16;
struct []unicode.Range32;
struct []unicode.foldPair;
struct []unsafe.Pointer;
typedef bool;
struct bucket<*net/http.Request,func()>;
struct bucket<*reflect.rtype,*reflect.ptrType>;
struct bucket<*reflect.structType,bool>;
struct bucket<*reflect.structType,int>;
struct bucket<*uint8,[]uint8>;
struct bucket<crypto.Hash,[]uint8>;
struct bucket<crypto/tls.alert,string>;
struct bucket<int,[][]*crypto/x509.Certificate>;
struct bucket<int,func() net.dnsRR>;
struct bucket<int, string>;
struct bucket<interface {},interface {}>;
struct bucket<net/http.ConnState,string>;
struct bucket<net/http.connectMethodKey,[]*net/http.persistConn>;
struct bucket<net/http.connectMethodKey,chan *net/http.persistConn>;
struct bucket<reflect.Type,*gopkg.in/yaml%2ev2.structInfo>;
struct bucket<reflect.Type,[]encoding/json.field>;
struct bucket<reflect.Type,bool>;
struct bucket<reflect.Type,encoding/json.encoderFunc>;
struct bucket<reflect.Type,int>;
struct bucket<reflect.layoutKey,reflect.layoutType>;
struct bucket<reflect.visit,bool>;
struct bucket<string,*crypto/tls.Certificate>;
struct bucket<string,*gopkg.in/yaml%2ev2.node>;
struct bucket<string,*net.call>;
struct bucket<string,*unicode.RangeTable>;
struct bucket<string,[]*mime/multipart.FileHeader>;
struct bucket<string,[]int>;
struct bucket<string,[]string>;
struct bucket<string, bool>;
struct bucket<string, float64>;
struct bucket<string,func(*net/http.Server, *crypto/tls.Conn, net/http.Handler)>;
struct bucket<string,gopkg.in/yaml%2ev2.fieldInfo>;
struct bucket<string,gopkg.in/yaml%2ev2.resolveMapItem>;
struct bucket<string, int>;
struct bucket<string,interface {}>;
struct bucket<string,map[string]int>;
struct bucket<string,map[string]string>;
struct bucket<string,net/http.RoundTripper>;
struct bucket<string,net/http.muxEntry>;
struct bucket<string,regexp/syntax.charGroup>;
struct bucket<string, string>;
struct bucket<uint32, bool>;
typedef struct bufio.ReadWriter bufio.ReadWriter;
typedef struct bufio.Reader bufio.Reader;
struct bufio.Writer;
typedef struct bytes.Buffer bytes.Buffer;
typedef struct bytes.Reader bytes.Reader;
typedef bytes.readOp;
typedef struct hchan<*net/http.persistConn> * chan *net/http.persistConn;
typedef struct hchan<[]uint8> * chan []uint8;
typedef struct hchan<bool> * chan bool;
typedef struct hchan<error> * chan error;
typedef struct hchan<net.racer·1> * chan net.racer·1;
typedef struct hchan<net.racer·2> * chan net.racer·2;
typedef struct hchan<net.singleflightResult> * chan net.singleflightResult;
typedef struct hchan<net/http.dialRes·2> * chan net/http.dialRes·2;
typedef struct hchan<net/http.requestAndChan> * chan net/http.requestAndChan;
typedef struct hchan<net/http.responseAndError> * chan net/http.responseAndError;
typedef struct hchan<net/http.writeRequest> * chan net/http.writeRequest;
typedef struct hchan<struct {}> * chan struct {};
typedef struct hchan<time.Time> * chan time.Time;
typedef struct hchan<error> * chan<- error;
typedef struct hchan<net.singleflightResult> * chan<- net.singleflightResult;
typedef complex128;
typedef complex64;
typedef compress/flate.CorruptInputError;
struct compress/flate.InternalError;
struct compress/flate.ReadError;
typedef struct runtime.iface compress/flate.Reader;
typedef struct compress/flate.decompressor compress/flate.decompressor;
typedef struct compress/flate.huffmanDecoder compress/flate.huffmanDecoder;
typedef struct compress/flate.huffmanEncoder compress/flate.huffmanEncoder;
typedef struct compress/flate.levelInfo compress/flate.levelInfo;
struct compress/flate.literalNode;
typedef struct compress/flate.literalNodeSorter compress/flate.literalNodeSorter;
struct compress/gzip.Header;
struct compress/gzip.Reader;
typedef crypto.Hash;
typedef struct runtime.eface crypto.PrivateKey;
typedef struct runtime.eface crypto.PublicKey;
typedef struct runtime.iface crypto.Signer;
typedef struct runtime.iface crypto.SignerOpts;
typedef crypto/aes.KeySizeError;
struct crypto/aes.aesCipher;
typedef struct runtime.iface crypto/cipher.AEAD;
typedef struct runtime.iface crypto/cipher.Block;
typedef struct runtime.iface crypto/cipher.BlockMode;
typedef struct runtime.iface crypto/cipher.Stream;
struct crypto/cipher.cbc;
typedef struct crypto/cipher.cbcDecrypter crypto/cipher.cbcDecrypter;
typedef struct crypto/cipher.cbcEncrypter crypto/cipher.cbcEncrypter;
typedef struct crypto/cipher.ctr crypto/cipher.ctr;
typedef struct crypto/cipher.gcm crypto/cipher.gcm;
struct crypto/cipher.gcmFieldElement;
typedef crypto/des.KeySizeError;
struct crypto/des.desCipher;
struct crypto/des.tripleDESCipher;
typedef struct crypto/dsa.Parameters crypto/dsa.Parameters;
struct crypto/dsa.PublicKey;
typedef struct crypto/ecdsa.PrivateKey crypto/ecdsa.PrivateKey;
struct crypto/ecdsa.PublicKey;
struct crypto/ecdsa.ecdsaSignature;
typedef struct runtime.iface crypto/elliptic.Curve;
struct crypto/elliptic.CurveParams;
typedef struct crypto/elliptic.p224Curve crypto/elliptic.p224Curve;
typedef crypto/elliptic.p224FieldElement crypto/elliptic.p224FieldElement;
typedef crypto/elliptic.p224LargeFieldElement crypto/elliptic.p224LargeFieldElement;
typedef struct crypto/elliptic.p256Curve crypto/elliptic.p256Curve;
typedef struct crypto/hmac.hmac crypto/hmac.hmac;
typedef struct crypto/md5.digest crypto/md5.digest;
struct crypto/rand.devReader;
struct crypto/rc4.Cipher;
typedef crypto/rc4.KeySizeError;
typedef struct crypto/rsa.CRTValue crypto/rsa.CRTValue;
typedef struct crypto/rsa.PSSOptions crypto/rsa.PSSOptions;
struct crypto/rsa.PrecomputedValues;
typedef struct crypto/rsa.PrivateKey crypto/rsa.PrivateKey;
struct crypto/rsa.PublicKey;
typedef struct crypto/sha1.digest crypto/sha1.digest;
struct crypto/sha256.digest;
typedef struct crypto/sha512.digest crypto/sha512.digest;
typedef struct crypto/tls.Certificate crypto/tls.Certificate;
typedef crypto/tls.ClientAuthType;
typedef struct crypto/tls.ClientHelloInfo crypto/tls.ClientHelloInfo;
typedef struct runtime.iface crypto/tls.ClientSessionCache;
typedef struct crypto/tls.ClientSessionState crypto/tls.ClientSessionState;
struct crypto/tls.Config;
typedef struct crypto/tls.Conn crypto/tls.Conn;
typedef struct crypto/tls.ConnectionState crypto/tls.ConnectionState;
typedef crypto/tls.CurveID;
typedef crypto/tls.alert;
struct crypto/tls.block;
typedef struct runtime.iface crypto/tls.cbcMode;
struct crypto/tls.certificateMsg;
typedef struct crypto/tls.certificateRequestMsg crypto/tls.certificateRequestMsg;
struct crypto/tls.certificateStatusMsg;
typedef struct crypto/tls.certificateVerifyMsg crypto/tls.certificateVerifyMsg;
typedef struct crypto/tls.cipherSuite crypto/tls.cipherSuite;
struct crypto/tls.clientHandshakeState;
struct crypto/tls.clientHelloMsg;
struct crypto/tls.clientKeyExchangeMsg;
struct crypto/tls.ecdheKeyAgreement;
struct crypto/tls.ecdsaSignature;
typedef struct crypto/tls.finishedHash crypto/tls.finishedHash;
typedef struct crypto/tls.finishedMsg crypto/tls.finishedMsg;
typedef struct crypto/tls.fixedNonceAEAD crypto/tls.fixedNonceAEAD;
typedef struct crypto/tls.halfConn crypto/tls.halfConn;
typedef struct runtime.iface crypto/tls.handshakeMessage;
typedef struct runtime.iface crypto/tls.keyAgreement;
typedef struct crypto/tls.listener crypto/tls.listener;
typedef struct runtime.iface crypto/tls.macFunction;
typedef struct crypto/tls.newSessionTicketMsg crypto/tls.newSessionTicketMsg;
struct crypto/tls.nextProtoMsg;
typedef crypto/tls.recordType;
struct crypto/tls.rsaKeyAgreement;
struct crypto/tls.serverHandshakeState;
struct crypto/tls.serverHelloDoneMsg;
struct crypto/tls.serverHelloMsg;
struct crypto/tls.serverKeyExchangeMsg;
typedef struct crypto/tls.sessionState crypto/tls.sessionState;
typedef struct crypto/tls.signatureAndHash crypto/tls.signatureAndHash;
struct crypto/tls.ssl30MAC;
struct crypto/tls.tls10MAC;
typedef struct crypto/x509.CertPool crypto/x509.CertPool;
struct crypto/x509.Certificate;
struct crypto/x509.CertificateInvalidError;
struct crypto/x509.ConstraintViolationError;
typedef crypto/x509.ExtKeyUsage;
struct crypto/x509.HostnameError;
typedef crypto/x509.InvalidReason;
typedef crypto/x509.KeyUsage;
typedef crypto/x509.PEMCipher;
typedef crypto/x509.PublicKeyAlgorithm;
typedef crypto/x509.SignatureAlgorithm;
typedef struct crypto/x509.SystemRootsError crypto/x509.SystemRootsError;
typedef struct crypto/x509.UnhandledCriticalExtension crypto/x509.UnhandledCriticalExtension;
typedef struct crypto/x509.UnknownAuthorityError crypto/x509.UnknownAuthorityError;
typedef struct crypto/x509.VerifyOptions crypto/x509.VerifyOptions;
typedef crypto/x509._Ctype_struct___CFData * crypto/x509._Ctype_CFDataRef;
typedef crypto/x509._Ctype_CFIndex;
typedef crypto/x509._Ctype_UInt8;
typedef crypto/x509._Ctype_int;
struct crypto/x509._Ctype_struct___CFData;
typedef crypto/x509._Ctype_void crypto/x509._Ctype_void;
struct crypto/x509.authKeyId;
typedef struct crypto/x509.authorityInfoAccess crypto/x509.authorityInfoAccess;
struct crypto/x509.basicConstraints;
struct crypto/x509.certificate;
struct crypto/x509.distributionPoint;
struct crypto/x509.distributionPointName;
typedef struct crypto/x509.dsaAlgorithmParameters crypto/x509.dsaAlgorithmParameters;
struct crypto/x509.dsaSignature;
typedef struct crypto/x509.ecPrivateKey crypto/x509.ecPrivateKey;
struct crypto/x509.ecdsaSignature;
typedef struct crypto/x509.generalSubtree crypto/x509.generalSubtree;
struct crypto/x509.nameConstraints;
typedef struct crypto/x509.pkcs1AdditionalRSAPrime crypto/x509.pkcs1AdditionalRSAPrime;
typedef struct crypto/x509.pkcs1PrivateKey crypto/x509.pkcs1PrivateKey;
typedef struct crypto/x509.pkcs8 crypto/x509.pkcs8;
struct crypto/x509.policyInformation;
struct crypto/x509.publicKeyInfo;
struct crypto/x509.rfc1423Algo;
typedef struct crypto/x509.rsaPublicKey crypto/x509.rsaPublicKey;
struct crypto/x509.tbsCertificate;
struct crypto/x509.validity;
typedef struct crypto/x509/pkix.AlgorithmIdentifier crypto/x509/pkix.AlgorithmIdentifier;
typedef struct crypto/x509/pkix.AttributeTypeAndValue crypto/x509/pkix.AttributeTypeAndValue;
typedef struct crypto/x509/pkix.CertificateList crypto/x509/pkix.CertificateList;
struct crypto/x509/pkix.Extension;
typedef struct crypto/x509/pkix.Name crypto/x509/pkix.Name;
typedef struct crypto/x509/pkix.RDNSequence crypto/x509/pkix.RDNSequence;
typedef struct crypto/x509/pkix.RelativeDistinguishedNameSET crypto/x509/pkix.RelativeDistinguishedNameSET;
typedef struct crypto/x509/pkix.RevokedCertificate crypto/x509/pkix.RevokedCertificate;
typedef struct crypto/x509/pkix.TBSCertificateList crypto/x509/pkix.TBSCertificateList;
typedef struct runtime.iface encoding.TextMarshaler;
typedef struct runtime.iface encoding.TextUnmarshaler;
struct encoding/asn1.BitString;
typedef encoding/asn1.Enumerated;
typedef encoding/asn1.Flag;
typedef struct encoding/asn1.ObjectIdentifier encoding/asn1.ObjectIdentifier;
struct encoding/asn1.RawContent;
typedef struct encoding/asn1.RawValue encoding/asn1.RawValue;
typedef struct encoding/asn1.StructuralError encoding/asn1.StructuralError;
struct encoding/asn1.SyntaxError;
typedef struct encoding/asn1.fieldParameters encoding/asn1.fieldParameters;
struct encoding/asn1.forkableWriter;
struct encoding/asn1.tagAndLength;
typedef encoding/base64.CorruptInputError;
struct encoding/base64.Encoding;
typedef struct encoding/base64.encoder encoding/base64.encoder;
struct encoding/binary.bigEndian;
typedef struct encoding/json.InvalidUnmarshalError encoding/json.InvalidUnmarshalError;
typedef struct runtime.iface encoding/json.Marshaler;
typedef struct encoding/json.MarshalerError encoding/json.MarshalerError;
struct encoding/json.Number;
struct encoding/json.SyntaxError;
typedef struct encoding/json.UnmarshalTypeError encoding/json.UnmarshalTypeError;
typedef struct runtime.iface encoding/json.Unmarshaler;
typedef struct encoding/json.UnsupportedTypeError encoding/json.UnsupportedTypeError;
typedef struct encoding/json.UnsupportedValueError encoding/json.UnsupportedValueError;
struct encoding/json.arrayEncoder;
struct encoding/json.byIndex;
struct encoding/json.byName;
struct encoding/json.condAddrEncoder;
typedef struct encoding/json.decodeState encoding/json.decodeState;
typedef struct encoding/json.encodeState encoding/json.encodeState;
typedef void (struct encoding/json.encodeState *, reflect.Value, bool) encoding/json.encoderFunc;
struct encoding/json.field;
typedef encoding/json.floatEncoder;
typedef struct encoding/json.mapEncoder encoding/json.mapEncoder;
typedef struct encoding/json.ptrEncoder encoding/json.ptrEncoder;
typedef struct encoding/json.scanner encoding/json.scanner;
typedef struct encoding/json.sliceEncoder encoding/json.sliceEncoder;
struct encoding/json.stringValues;
typedef struct encoding/json.structEncoder encoding/json.structEncoder;
struct encoding/json.tagOptions;
struct encoding/json.unquotedValue;
typedef struct encoding/pem.Block encoding/pem.Block;
typedef struct runtime.iface error;
typedef struct errors.errorString errors.errorString;
typedef float32;
typedef float64;
typedef struct runtime.iface fmt.Formatter;
typedef struct runtime.iface fmt.GoStringer;
typedef struct runtime.iface fmt.ScanState;
typedef struct runtime.iface fmt.Scanner;
typedef struct runtime.iface fmt.State;
typedef struct runtime.iface fmt.Stringer;
struct fmt.buffer;
typedef struct fmt.fmt fmt.fmt;
typedef struct fmt.fmtFlags fmt.fmtFlags;
struct fmt.pp;
typedef struct runtime.iface fmt.runeUnreader;
typedef struct fmt.scanError fmt.scanError;
struct fmt.ss;
struct fmt.ssave;
typedef void (void) func();
typedef void (struct net/http.Response **, error *) func() (*net/http.Response, error);
typedef void (interface {} *, error *) func() (interface {}, error);
typedef void (error *) func() error;
typedef void (hash.Hash *) func() hash.Hash;
typedef void (interface {} *) func() interface {};
typedef void (net.dnsRR *) func() net.dnsRR;
typedef void (time.Time *) func() time.Time;
typedef void (compress/flate.decompressor *) func(*compress/flate.decompressor);
typedef void (struct crypto/tls.ClientHelloInfo *, crypto/tls.Certificate **, error *) func(*crypto/tls.ClientHelloInfo) (*crypto/tls.Certificate, error);
typedef void (struct encoding/json.encodeState *, struct reflect.Value, bool) func(*encoding/json.encodeState, reflect.Value, bool);
typedef void (encoding/json.scanner *, int, int *) func(*encoding/json.scanner, int) int;
typedef void (int *, struct []int32 *, uint32, bool *) func(*int, *[]int32, uint32) bool;
typedef void (net._Ctype_char *, struct string *) func(*net._Ctype_char) string;
typedef void (struct net/http.Request *, struct net/url.URL **, error *) func(*net/http.Request) (*net/url.URL, error);
typedef void (struct net/http.Request *, struct []*net/http.Request, error *) func(*net/http.Request, []*net/http.Request) error;
typedef void (struct net/http.Server *, struct crypto/tls.Conn *, net/http.Handler) func(*net/http.Server, *crypto/tls.Conn, net/http.Handler);
typedef void (struct runtime.g *) func(*runtime.g);
typedef void (struct runtime.g *, void *, bool *) func(*runtime.g, unsafe.Pointer) bool;
typedef void (struct runtime.stkframe *, void *, bool *) func(*runtime.stkframe, unsafe.Pointer) bool;
typedef void (struct []int) func([]int);
typedef void (struct []uint8) func([]uint8);
typedef void (struct []uint8, crypto/cipher.Block *, error *) func([]uint8) (crypto/cipher.Block, error);
typedef void (struct []uint8, struct []uint8 *) func([]uint8) []uint8;
typedef void (struct []uint8, bool *) func([]uint8) bool;
typedef void (struct []uint8, struct []int, struct []uint8 *) func([]uint8, []int) []uint8;
typedef void (struct []uint8, struct []uint8, bool *) func([]uint8, []uint8) bool;
typedef void (struct []uint8, struct []uint8, crypto/cipher.AEAD *) func([]uint8, []uint8) crypto/cipher.AEAD;
typedef void (struct []uint8, struct []uint8, struct []uint8, struct []uint8) func([]uint8, []uint8, []uint8, []uint8);
typedef void (struct []uint8, struct []uint8, bool, interface {} *) func([]uint8, []uint8, bool) interface {};
typedef void (error) func(error);
typedef void (error, bool *) func(error) bool;
typedef void (int, bool *) func(int) bool;
typedef void (int, int, bool *) func(int, int) bool;
typedef void (int32, bool *) func(int32) bool;
typedef void (int32, int32 *) func(int32) int32;
typedef void (interface {}, struct string, struct string, bool *) func(interface {}, string, string) bool;
typedef void (interface {}, uintptr) func(interface {}, uintptr);
typedef void (net.Conn, net/http.ConnState) func(net.Conn, net/http.ConnState);
typedef void (net.IP, net.IP *) func(net.IP) net.IP;
typedef void (net.IP, net.netaddr *) func(net.IP) net.netaddr;
typedef void (net/http.Header) func(net/http.Header);
typedef void (net/http.ResponseWriter, struct net/http.Request *) func(net/http.ResponseWriter, *net/http.Request);
typedef void (reflect.Kind, bool *) func(reflect.Kind) bool;
typedef void (reflect.Value, reflect.Type, reflect.Value *) func(reflect.Value, reflect.Type) reflect.Value;
typedef void (struct string) func(string);
typedef void (struct string, os.FileInfo *, error *) func(string) (os.FileInfo, error);
typedef void (struct string, bool *) func(string) bool;
typedef void (struct string, struct string *) func(string) string;
typedef void (struct string, struct string, net.Conn *, error *) func(string, string) (net.Conn, error);
typedef void (syscall.Sockaddr, net.Addr *) func(syscall.Sockaddr) net.Addr;
typedef void (time.Time, net.Conn *, error *) func(time.Time) (net.Conn, error);
typedef void (uint16, crypto/tls.keyAgreement *) func(uint16) crypto/tls.keyAgreement;
typedef void (uint16, struct []uint8, crypto/tls.macFunction *) func(uint16, []uint8) crypto/tls.macFunction;
typedef void (uint32, struct regexp.queueOnePass *) func(uint32, *regexp.queueOnePass);
typedef void (uint32, map[uint32]bool, bool *) func(uint32, map[uint32]bool) bool;
typedef void (uint8, bool *) func(uint8) bool;
typedef void (uintptr, void **) func(uintptr) unsafe.Pointer;
typedef void (uintptr, uintptr, error *) func(uintptr, uintptr) error;
typedef void (uintptr, uintptr, int, int, int, int64, uintptr *, error *) func(uintptr, uintptr, int, int, int, int64) (uintptr, error);
typedef void (void *, int, struct []uint8 *) func(unsafe.Pointer, int) []uint8;
typedef void (void *, uintptr, int32 *) func(unsafe.Pointer, uintptr) int32;
typedef void (void *, uintptr, uintptr, uintptr *) func(unsafe.Pointer, uintptr, uintptr) uintptr;
typedef void (void *, void *, uintptr, bool *) func(unsafe.Pointer, unsafe.Pointer, uintptr) bool;
typedef struct github.com/kurrik/json.EndArray github.com/kurrik/json.EndArray;
struct github.com/kurrik/json.EndMap;
struct github.com/kurrik/json.Event;
struct github.com/kurrik/json.State;
typedef struct github.com/kurrik/oauth1a.ClientConfig github.com/kurrik/oauth1a.ClientConfig;
typedef struct github.com/kurrik/oauth1a.HmacSha1Signer github.com/kurrik/oauth1a.HmacSha1Signer;
typedef struct github.com/kurrik/oauth1a.Service github.com/kurrik/oauth1a.Service;
typedef struct runtime.iface github.com/kurrik/oauth1a.Signer;
typedef struct github.com/kurrik/oauth1a.UserConfig github.com/kurrik/oauth1a.UserConfig;
typedef struct github.com/kurrik/twittergo.APIResponse github.com/kurrik/twittergo.APIResponse;
struct github.com/kurrik/twittergo.BearerToken;
struct github.com/kurrik/twittergo.Client;
typedef struct hash<string,interface {}> * github.com/kurrik/twittergo.Error;
typedef struct hash<string,interface {}> * github.com/kurrik/twittergo.Errors;
typedef struct github.com/kurrik/twittergo.RateLimitError github.com/kurrik/twittergo.RateLimitError;
typedef struct github.com/kurrik/twittergo.ResponseError github.com/kurrik/twittergo.ResponseError;
typedef struct hash<string,interface {}> * github.com/kurrik/twittergo.Tweet;
typedef struct hash<string,interface {}> * github.com/kurrik/twittergo.User;
typedef struct gopkg.in/yaml%2ev2.MapItem gopkg.in/yaml%2ev2.MapItem;
struct gopkg.in/yaml%2ev2.TypeError;
typedef struct runtime.iface gopkg.in/yaml%2ev2.Unmarshaler;
struct gopkg.in/yaml%2ev2.decoder;
typedef struct gopkg.in/yaml%2ev2.fieldInfo gopkg.in/yaml%2ev2.fieldInfo;
typedef struct gopkg.in/yaml%2ev2.node gopkg.in/yaml%2ev2.node;
typedef struct gopkg.in/yaml%2ev2.parser gopkg.in/yaml%2ev2.parser;
struct gopkg.in/yaml%2ev2.resolveMapItem;
struct gopkg.in/yaml%2ev2.structInfo;
struct gopkg.in/yaml%2ev2.yamlError;
struct gopkg.in/yaml%2ev2.yaml_alias_data_t;
struct gopkg.in/yaml%2ev2.yaml_document_t;
typedef gopkg.in/yaml%2ev2.yaml_encoding_t;
typedef gopkg.in/yaml%2ev2.yaml_error_type_t;
struct gopkg.in/yaml%2ev2.yaml_event_t;
typedef gopkg.in/yaml%2ev2.yaml_event_type_t;
typedef gopkg.in/yaml%2ev2.yaml_mapping_style_t;
struct gopkg.in/yaml%2ev2.yaml_mark_t;
typedef gopkg.in/yaml%2ev2.yaml_node_item_t;
typedef struct gopkg.in/yaml%2ev2.yaml_node_pair_t gopkg.in/yaml%2ev2.yaml_node_pair_t;
typedef struct gopkg.in/yaml%2ev2.yaml_node_t gopkg.in/yaml%2ev2.yaml_node_t;
typedef gopkg.in/yaml%2ev2.yaml_node_type_t;
typedef gopkg.in/yaml%2ev2.yaml_parser_state_t;
struct gopkg.in/yaml%2ev2.yaml_parser_t;
typedef void (struct gopkg.in/yaml%2ev2.yaml_parser_t *, struct []uint8, int *, error *) gopkg.in/yaml%2ev2.yaml_read_handler_t;
typedef gopkg.in/yaml%2ev2.yaml_scalar_style_t;
typedef gopkg.in/yaml%2ev2.yaml_sequence_style_t;
struct gopkg.in/yaml%2ev2.yaml_simple_key_t;
typedef gopkg.in/yaml%2ev2.yaml_style_t;
typedef struct gopkg.in/yaml%2ev2.yaml_tag_directive_t gopkg.in/yaml%2ev2.yaml_tag_directive_t;
typedef struct gopkg.in/yaml%2ev2.yaml_token_t gopkg.in/yaml%2ev2.yaml_token_t;
typedef gopkg.in/yaml%2ev2.yaml_token_type_t;
typedef struct gopkg.in/yaml%2ev2.yaml_version_directive_t gopkg.in/yaml%2ev2.yaml_version_directive_t;
typedef struct runtime.iface hash.Hash;
typedef struct runtime.iface hash.Hash32;
typedef hash/crc32.Table hash/crc32.Table;
struct hash/crc32.digest;
struct hash<*net/http.Request,func()>;
struct hash<*reflect.rtype,*reflect.ptrType>;
struct hash<*reflect.structType,bool>;
struct hash<*reflect.structType,int>;
struct hash<*uint8,[]uint8>;
struct hash<crypto.Hash,[]uint8>;
struct hash<crypto/tls.alert,string>;
struct hash<int,[][]*crypto/x509.Certificate>;
struct hash<int,func() net.dnsRR>;
struct hash<int, string>;
struct hash<interface {},interface {}>;
struct hash<net/http.ConnState,string>;
struct hash<net/http.connectMethodKey,[]*net/http.persistConn>;
struct hash<net/http.connectMethodKey,chan *net/http.persistConn>;
struct hash<reflect.Type,*gopkg.in/yaml%2ev2.structInfo>;
struct hash<reflect.Type,[]encoding/json.field>;
struct hash<reflect.Type,bool>;
struct hash<reflect.Type,encoding/json.encoderFunc>;
struct hash<reflect.Type,int>;
struct hash<reflect.layoutKey,reflect.layoutType>;
struct hash<reflect.visit,bool>;
struct hash<string,*crypto/tls.Certificate>;
struct hash<string,*gopkg.in/yaml%2ev2.node>;
struct hash<string,*net.call>;
struct hash<string,*unicode.RangeTable>;
struct hash<string,[]*mime/multipart.FileHeader>;
struct hash<string,[]int>;
struct hash<string,[]string>;
struct hash<string, bool>;
struct hash<string, float64>;
struct hash<string,func(*net/http.Server, *crypto/tls.Conn, net/http.Handler)>;
struct hash<string,gopkg.in/yaml%2ev2.fieldInfo>;
struct hash<string,gopkg.in/yaml%2ev2.resolveMapItem>;
struct hash<string, int>;
struct hash<string,interface {}>;
struct hash<string,map[string]int>;
struct hash<string,map[string]string>;
struct hash<string,net/http.RoundTripper>;
struct hash<string,net/http.muxEntry>;
struct hash<string,regexp/syntax.charGroup>;
struct hash<string, string>;
struct hash<uint32, bool>;
struct hchan<*net/http.persistConn>;
struct hchan<[]uint8>;
struct hchan<bool>;
struct hchan<chan struct {}>;
struct hchan<error>;
struct hchan<net.racer·1>;
struct hchan<net.racer·2>;
struct hchan<net.singleflightResult>;
struct hchan<net/http.dialRes·2>;
struct hchan<net/http.requestAndChan>;
struct hchan<net/http.responseAndError>;
struct hchan<net/http.writeRequest>;
struct hchan<struct {}>;
struct hchan<time.Time>;
typedef int;
typedef int16;
typedef int32;
typedef int64;
typedef int8;
typedef struct runtime.iface interface { runtime.f() };
typedef struct runtime.eface interface {};
typedef struct runtime.iface io.Closer;
typedef struct io.LimitedReader io.LimitedReader;
typedef struct io.PipeReader io.PipeReader;
typedef struct io.PipeWriter io.PipeWriter;
typedef struct runtime.iface io.ReadCloser;
typedef struct runtime.iface io.Reader;
typedef struct runtime.iface io.ReaderAt;
typedef struct runtime.iface io.ReaderFrom;
typedef struct runtime.iface io.RuneReader;
typedef struct runtime.iface io.RuneScanner;
typedef struct io.SectionReader io.SectionReader;
typedef struct runtime.iface io.WriteCloser;
typedef struct runtime.iface io.Writer;
typedef struct runtime.iface io.WriterTo;
typedef struct io.multiReader io.multiReader;
typedef struct io.pipe io.pipe;
typedef struct runtime.iface io.stringWriter;
typedef io/ioutil.devNull;
struct io/ioutil.nopCloser;
typedef struct log.Logger log.Logger;
typedef struct main.streamConn main.streamConn;
struct map.bucket[net/http.connectMethodKey][]*net/http.persistConn;
typedef struct map.bucket[string][]*mime/multipart.FileHeader map.bucket[string][]*mime/multipart.FileHeader;
typedef struct map.bucket[string][]string map.bucket[string][]string;
typedef struct map.bucket[string]map[string]string map.bucket[string]map[string]string;
typedef struct map.bucket[string]net/http.muxEntry map.bucket[string]net/http.muxEntry;
typedef struct map.bucket[string]string map.bucket[string]string;
typedef struct map.hdr[net/http.connectMethodKey][]*net/http.persistConn map.hdr[net/http.connectMethodKey][]*net/http.persistConn;
typedef struct map.hdr[string][]*mime/multipart.FileHeader map.hdr[string][]*mime/multipart.FileHeader;
struct map.hdr[string][]string;
typedef struct map.hdr[string]map[string]string map.hdr[string]map[string]string;
typedef struct map.hdr[string]net/http.muxEntry map.hdr[string]net/http.muxEntry;
struct map.hdr[string]string;
struct map.iter[net/http.connectMethodKey][]*net/http.persistConn;
struct map.iter[string][]*mime/multipart.FileHeader;
struct map.iter[string][]string;
struct map.iter[string]map[string]string;
typedef struct map.iter[string]net/http.muxEntry map.iter[string]net/http.muxEntry;
typedef struct map.iter[string]string map.iter[string]string;
typedef struct hash<*net/http.Request,func()> * map[*net/http.Request]func();
typedef struct hash<*reflect.rtype,*reflect.ptrType> * map[*reflect.rtype]*reflect.ptrType;
typedef struct hash<*reflect.structType,bool> * map[*reflect.structType]bool;
typedef struct hash<*reflect.structType,int> * map[*reflect.structType]int;
typedef struct hash<*uint8,[]uint8> * map[*uint8][]uint8;
typedef struct hash<crypto.Hash,[]uint8> * map[crypto.Hash][]uint8;
typedef struct hash<crypto/tls.alert,string> * map[crypto/tls.alert]string;
typedef struct hash<int,[][]*crypto/x509.Certificate> * map[int][][]*crypto/x509.Certificate;
typedef struct hash<int,func() net.dnsRR> * map[int]func() net.dnsRR;
typedef struct hash<int, string> * map[int]string;
typedef struct hash<interface {},interface {}> * map[interface {}]interface {};
typedef struct hash<net/http.ConnState,string> * map[net/http.ConnState]string;
typedef struct hash<net/http.connectMethodKey,[]*net/http.persistConn> * map[net/http.connectMethodKey][]*net/http.persistConn;
typedef struct hash<net/http.connectMethodKey,chan *net/http.persistConn> * map[net/http.connectMethodKey]chan *net/http.persistConn;
typedef struct hash<reflect.Type,*gopkg.in/yaml%2ev2.structInfo> * map[reflect.Type]*gopkg.in/yaml%2ev2.structInfo;
typedef struct hash<reflect.Type,[]encoding/json.field> * map[reflect.Type][]encoding/json.field;
typedef struct hash<reflect.Type,bool> * map[reflect.Type]bool;
typedef struct hash<reflect.Type,encoding/json.encoderFunc> * map[reflect.Type]encoding/json.encoderFunc;
typedef struct hash<reflect.Type,int> * map[reflect.Type]int;
typedef struct hash<reflect.layoutKey,reflect.layoutType> * map[reflect.layoutKey]reflect.layoutType;
typedef struct hash<reflect.visit,bool> * map[reflect.visit]bool;
typedef struct hash<string,*crypto/tls.Certificate> * map[string]*crypto/tls.Certificate;
typedef struct hash<string,*gopkg.in/yaml%2ev2.node> * map[string]*gopkg.in/yaml%2ev2.node;
typedef struct hash<string,*net.call> * map[string]*net.call;
typedef struct hash<string,*unicode.RangeTable> * map[string]*unicode.RangeTable;
typedef struct hash<string,[]*mime/multipart.FileHeader> * map[string][]*mime/multipart.FileHeader;
typedef struct hash<string,[]int> * map[string][]int;
typedef struct hash<string,[]string> * map[string][]string;
typedef struct hash<string, bool> * map[string]bool;
typedef struct hash<string, float64> * map[string]float64;
typedef struct hash<string,func(*net/http.Server, *crypto/tls.Conn, net/http.Handler)> * map[string]func(*net/http.Server, *crypto/tls.Conn, net/http.Handler);
typedef struct hash<string,gopkg.in/yaml%2ev2.fieldInfo> * map[string]gopkg.in/yaml%2ev2.fieldInfo;
typedef struct hash<string,gopkg.in/yaml%2ev2.resolveMapItem> * map[string]gopkg.in/yaml%2ev2.resolveMapItem;
typedef struct hash<string, int> * map[string]int;
typedef struct hash<string,interface {}> * map[string]interface {};
typedef struct hash<string,map[string]int> * map[string]map[string]int;
typedef struct hash<string,map[string]string> * map[string]map[string]string;
typedef struct hash<string,net/http.RoundTripper> * map[string]net/http.RoundTripper;
typedef struct hash<string,net/http.muxEntry> * map[string]net/http.muxEntry;
typedef struct hash<string,regexp/syntax.charGroup> * map[string]regexp/syntax.charGroup;
typedef struct hash<string, string> * map[string]string;
typedef struct hash<uint32, bool> * map[uint32]bool;
struct math/big.Int;
typedef math/big.Word;
typedef struct math/big.divisor math/big.divisor;
typedef struct math/big.nat math/big.nat;
typedef struct math/rand.Rand math/rand.Rand;
typedef struct runtime.iface math/rand.Source;
struct math/rand.lockedSource;
struct math/rand.rngSource;
typedef struct runtime.iface mime/multipart.File;
struct mime/multipart.FileHeader;
struct mime/multipart.Form;
typedef struct mime/multipart.Part mime/multipart.Part;
typedef struct mime/multipart.Reader mime/multipart.Reader;
struct mime/multipart.partReader;
typedef struct mime/multipart.qpReader mime/multipart.qpReader;
typedef struct mime/multipart.sectionReadCloser mime/multipart.sectionReadCloser;
typedef struct runtime.iface net.Addr;
typedef struct net.AddrError net.AddrError;
typedef struct runtime.iface net.Conn;
typedef struct net.DNSConfigError net.DNSConfigError;
typedef struct net.DNSError net.DNSError;
struct net.Dialer;
typedef struct runtime.iface net.Error;
typedef net.Flags;
typedef struct net.HardwareAddr net.HardwareAddr;
struct net.IP;
typedef struct net.IPAddr net.IPAddr;
typedef struct net.IPConn net.IPConn;
typedef struct net.IPMask net.IPMask;
struct net.IPNet;
typedef struct net.Interface net.Interface;
struct net.InvalidAddrError;
typedef struct runtime.iface net.Listener;
typedef struct net.OpError net.OpError;
struct net.ParseError;
struct net.TCPAddr;
struct net.TCPConn;
struct net.TCPListener;
struct net.UDPAddr;
typedef struct net.UDPConn net.UDPConn;
struct net.UnixAddr;
typedef struct net.UnixConn net.UnixConn;
struct net.UnixListener;
struct net.UnknownNetworkError;
typedef net._Ctype___uint8_t;
typedef net._Ctype_char;
typedef net._Ctype_int;
typedef net._Ctype_sa_family_t;
typedef net._Ctype_socklen_t;
struct net._Ctype_struct_addrinfo;
struct net._Ctype_struct_sockaddr;
typedef net._Ctype_void net._Ctype_void;
struct net.addrList;
struct net.call;
typedef struct net.conn net.conn;
typedef struct net.dnsConfig net.dnsConfig;
typedef struct runtime.iface net.dnsConn;
struct net.dnsHeader;
typedef struct net.dnsMsg net.dnsMsg;
typedef struct net.dnsMsgHdr net.dnsMsgHdr;
typedef struct net.dnsQuestion net.dnsQuestion;
typedef struct runtime.iface net.dnsRR;
typedef struct net.dnsRR_A net.dnsRR_A;
typedef struct net.dnsRR_AAAA net.dnsRR_AAAA;
struct net.dnsRR_CNAME;
typedef struct net.dnsRR_HINFO net.dnsRR_HINFO;
typedef struct net.dnsRR_Header net.dnsRR_Header;
struct net.dnsRR_MB;
struct net.dnsRR_MG;
struct net.dnsRR_MINFO;
typedef struct net.dnsRR_MR net.dnsRR_MR;
typedef struct net.dnsRR_MX net.dnsRR_MX;
typedef struct net.dnsRR_NS net.dnsRR_NS;
typedef struct net.dnsRR_PTR net.dnsRR_PTR;
typedef struct net.dnsRR_SOA net.dnsRR_SOA;
typedef struct net.dnsRR_SRV net.dnsRR_SRV;
typedef struct net.dnsRR_TXT net.dnsRR_TXT;
typedef struct runtime.iface net.dnsStruct;
typedef struct net.fdMutex net.fdMutex;
struct net.file;
typedef struct net.netFD net.netFD;
typedef struct runtime.iface net.netaddr;
typedef struct net.pollDesc net.pollDesc;
typedef struct net.racer·1 net.racer·1;
typedef struct net.racer·2 net.racer·2;
struct net.singleflight;
typedef struct net.singleflightResult net.singleflightResult;
typedef struct runtime.iface net.sockaddr;
typedef struct runtime.iface net.temporary;
typedef struct runtime.iface net.timeout;
struct net.timeoutError;
struct net.writerOnly;
typedef struct net/http.Client net/http.Client;
typedef net/http.ConnState;
struct net/http.Cookie;
typedef struct runtime.iface net/http.CookieJar;
typedef struct runtime.iface net/http.Handler;
typedef void (net/http.ResponseWriter, struct net/http.Request *) net/http.HandlerFunc;
typedef struct hash<string,[]string> * net/http.Header;
typedef struct net/http.ProtocolError net/http.ProtocolError;
struct net/http.Request;
typedef struct net/http.Response net/http.Response;
typedef struct runtime.iface net/http.ResponseWriter;
typedef struct runtime.iface net/http.RoundTripper;
typedef struct net/http.ServeMux net/http.ServeMux;
typedef struct net/http.Server net/http.Server;
struct net/http.Transport;
struct net/http.badStringError;
typedef struct net/http.body net/http.body;
typedef struct net/http.bodyEOFSignal net/http.bodyEOFSignal;
typedef struct net/http.bodyLocked net/http.bodyLocked;
typedef struct net/http.cancelTimerBody net/http.cancelTimerBody;
typedef struct runtime.iface net/http.canceler·1;
typedef struct net/http.checkConnErrorWriter net/http.checkConnErrorWriter;
struct net/http.chunkWriter;
typedef struct runtime.iface net/http.closeWriter;
typedef struct net/http.conn net/http.conn;
typedef struct net/http.connectMethod net/http.connectMethod;
typedef struct net/http.connectMethodKey net/http.connectMethodKey;
typedef struct net/http.dialRes·2 net/http.dialRes·2;
typedef struct net/http.envOnce net/http.envOnce;
typedef struct net/http.eofReaderWithWriteTo net/http.eofReaderWithWriteTo;
struct net/http.errorReader;
struct net/http.exactSig;
struct net/http.expectContinueReader;
struct net/http.extraHeader;
struct net/http.globalOptionsHandler;
struct net/http.gzipReader;
typedef struct net/http.headerSorter net/http.headerSorter;
struct net/http.htmlSig;
typedef struct net/http.httpError net/http.httpError;
struct net/http.initNPNRequest;
struct net/http.keyValues;
typedef struct net/http.liveSwitchReader net/http.liveSwitchReader;
struct net/http.maskedSig;
struct net/http.maxBytesReader;
typedef struct net/http.muxEntry net/http.muxEntry;
struct net/http.noteEOFReader;
struct net/http.persistConn;
struct net/http.redirectHandler;
struct net/http.requestAndChan;
typedef struct net/http.response net/http.response;
typedef struct net/http.responseAndError net/http.responseAndError;
typedef struct net/http.serverHandler net/http.serverHandler;
typedef struct runtime.iface net/http.sniffSig;
typedef struct net/http.stringWriter net/http.stringWriter;
typedef struct net/http.switchWriter net/http.switchWriter;
typedef struct net/http.tcpKeepAliveListener net/http.tcpKeepAliveListener;
typedef net/http.textSig;
struct net/http.tlsHandshakeTimeoutError;
struct net/http.transferReader;
struct net/http.transferWriter;
struct net/http.transportRequest;
struct net/http.writeRequest;
typedef struct runtime.iface net/http.writeStringer;
struct net/http.writerOnly;
struct net/http/internal.chunkedReader;
struct net/http/internal.chunkedWriter;
struct net/textproto.Error;
typedef struct hash<string,[]string> * net/textproto.MIMEHeader;
struct net/textproto.ProtocolError;
typedef struct net/textproto.Reader net/textproto.Reader;
struct net/textproto.dotReader;
struct net/url.Error;
struct net/url.EscapeError;
struct net/url.URL;
struct net/url.Userinfo;
typedef struct hash<string,[]string> * net/url.Values;
typedef net/url.encoding;
typedef struct os.File os.File;
typedef struct runtime.iface os.FileInfo;
typedef os.FileMode;
struct os.LinkError;
struct os.PathError;
typedef struct runtime.iface os.Signal;
struct os.SyscallError;
struct os.dirInfo;
struct os.file;
typedef struct os.fileStat os.fileStat;
struct path.lazybuf;
typedef struct path/filepath.lazybuf path/filepath.lazybuf;
typedef reflect.ChanDir;
typedef reflect.Kind;
struct reflect.Method;
typedef struct reflect.StructField reflect.StructField;
struct reflect.StructTag;
typedef struct runtime.iface reflect.Type;
struct reflect.Value;
typedef struct reflect.ValueError reflect.ValueError;
struct reflect.arrayType;
typedef struct reflect.bitVector reflect.bitVector;
typedef struct reflect.chanType reflect.chanType;
typedef struct reflect.emptyInterface reflect.emptyInterface;
struct reflect.fieldScan;
typedef reflect.flag;
struct reflect.funcType;
struct reflect.gcProg;
struct reflect.imethod;
struct reflect.interfaceType;
struct reflect.layoutKey;
struct reflect.layoutType;
typedef struct reflect.mapType reflect.mapType;
typedef struct reflect.method reflect.method;
struct reflect.methodValue;
typedef struct reflect.ptrType reflect.ptrType;
typedef struct reflect.rtype reflect.rtype;
typedef struct reflect.sliceHeader reflect.sliceHeader;
typedef struct reflect.sliceType reflect.sliceType;
struct reflect.stringHeader;
typedef struct reflect.structField reflect.structField;
struct reflect.structType;
struct reflect.typeAlg;
typedef struct reflect.uncommonType reflect.uncommonType;
typedef struct reflect.visit reflect.visit;
struct regexp.Regexp;
struct regexp.entry;
typedef struct runtime.iface regexp.input;
typedef struct regexp.inputBytes regexp.inputBytes;
struct regexp.inputReader;
typedef struct regexp.inputString regexp.inputString;
typedef struct regexp.machine regexp.machine;
typedef struct regexp.onePassInst regexp.onePassInst;
typedef struct regexp.onePassProg regexp.onePassProg;
struct regexp.queue;
struct regexp.queueOnePass;
struct regexp.runeSlice;
struct regexp.thread;
typedef regexp/syntax.EmptyOp;
struct regexp/syntax.Error;
struct regexp/syntax.ErrorCode;
typedef regexp/syntax.Flags;
struct regexp/syntax.Inst;
typedef regexp/syntax.InstOp;
typedef regexp/syntax.Op;
struct regexp/syntax.Prog;
struct regexp/syntax.Regexp;
struct regexp/syntax.charGroup;
struct regexp/syntax.compiler;
struct regexp/syntax.frag;
typedef struct regexp/syntax.parser regexp/syntax.parser;
typedef regexp/syntax.patchList;
typedef struct regexp/syntax.ranges regexp/syntax.ranges;
typedef struct runtime.Func runtime.Func;
typedef struct runtime.MemStats runtime.MemStats;
struct runtime.TypeAssertionError;
typedef struct runtime._defer runtime._defer;
typedef struct runtime._func runtime._func;
typedef struct runtime._panic runtime._panic;
struct runtime._select;
typedef struct runtime._string runtime._string;
struct runtime._type;
struct runtime.args·1;
struct runtime.bitvector;
typedef struct runtime.blockRecord runtime.blockRecord;
struct runtime.bmap;
typedef struct runtime.bucket runtime.bucket;
typedef runtime.bucketType;
typedef struct runtime.cgomal runtime.cgomal;
struct runtime.chantype;
typedef struct runtime.cpuProfile runtime.cpuProfile;
typedef struct runtime.cpuprofEntry runtime.cpuprofEntry;
struct runtime.debugvars;
struct runtime.eface;
struct runtime.errorString;
typedef struct runtime.iface runtime.fInterface;
typedef struct runtime.finalizer runtime.finalizer;
typedef struct runtime.finblock runtime.finblock;
struct runtime.fixalloc;
struct runtime.forcegcstate;
typedef struct runtime.functab runtime.functab;
typedef struct runtime.functype runtime.functype;
typedef struct runtime.funcval runtime.funcval;
typedef struct runtime.g runtime.g;
struct runtime.gcstats;
typedef struct runtime.gobuf runtime.gobuf;
struct runtime.hchan;
struct runtime.hiter;
struct runtime.hmap;
struct runtime.iface;
typedef struct runtime.imethod runtime.imethod;
typedef struct runtime.interfacetype runtime.interfacetype;
typedef runtime.intptr;
typedef struct runtime.itab runtime.itab;
struct runtime.keventt;
typedef struct runtime.m runtime.m;
struct runtime.maptype;
typedef struct runtime.mcache runtime.mcache;
struct runtime.mcentral;
struct runtime.memRecord;
struct runtime.method;
struct runtime.mheap;
struct runtime.mheapcentral;
typedef struct runtime.mlink runtime.mlink;
struct runtime.mspan;
struct runtime.mstats;
struct runtime.mstatsbysize;
typedef struct runtime.mutex runtime.mutex;
typedef struct runtime.note runtime.note;
typedef struct runtime.p runtime.p;
typedef runtime.pageID;
struct runtime.parfor;
typedef struct runtime.parforthread runtime.parforthread;
typedef struct runtime.pollCache runtime.pollCache;
typedef struct runtime.pollDesc runtime.pollDesc;
struct runtime.ptrtype;
typedef struct runtime.scase runtime.scase;
typedef struct runtime.schedt runtime.schedt;
struct runtime.semaRoot;
struct runtime.slice;
struct runtime.sliceStruct;
typedef struct runtime.slicetype runtime.slicetype;
struct runtime.special;
struct runtime.stack;
struct runtime.stackfreelist;
struct runtime.stkframe;
typedef struct runtime.stringStruct runtime.stringStruct;
typedef struct runtime.iface runtime.stringer;
struct runtime.sudog;
typedef struct runtime.sweepdata runtime.sweepdata;
typedef struct runtime.syncSema runtime.syncSema;
struct runtime.timer;
struct runtime.timespec;
struct runtime.typeAlg;
typedef runtime.uintreg;
struct runtime.uncommontype;
struct runtime.waitq;
typedef struct runtime.workdata runtime.workdata;
typedef struct runtime.iface sort.Interface;
typedef struct sort.StringSlice sort.StringSlice;
typedef struct strconv.NumError strconv.NumError;
typedef struct strconv.decimal strconv.decimal;
typedef struct strconv.decimalSlice strconv.decimalSlice;
typedef struct strconv.extFloat strconv.extFloat;
typedef struct strconv.floatInfo strconv.floatInfo;
struct strconv.leftCheat;
struct string;
typedef struct strings.Reader strings.Reader;
typedef struct strings.Replacer strings.Replacer;
typedef struct strings.appendSliceWriter strings.appendSliceWriter;
typedef strings.byteReplacer strings.byteReplacer;
typedef strings.byteStringReplacer strings.byteStringReplacer;
typedef struct strings.genericReplacer strings.genericReplacer;
typedef struct runtime.iface strings.replacer;
struct strings.singleStringReplacer;
struct strings.stringFinder;
struct strings.stringWriter;
typedef struct runtime.iface strings.stringWriterIface;
struct strings.trieNode;
struct struct { F uintptr; A0 **crypto/tls.Conn; A1 **time.Timer; A2 *chan error };
struct struct { F uintptr; A0 **fmt.fmt };
struct struct { F uintptr; A0 **gopkg.in/yaml%2ev2.decoder; A1 **gopkg.in/yaml%2ev2.node; A2 *int };
struct struct { F uintptr; A0 **io.PipeWriter; A1 *io.Reader; A2 **net/http.conn };
struct struct { F uintptr; A0 **mime/multipart.Part; A1 *int };
struct struct { F uintptr; A0 **net/http.Transport; A1 *net/http.connectMethod; A2 *chan net/http.dialRes·2 };
struct struct { F uintptr; A0 **net/http.conn; A1 *net.Conn };
struct struct { F uintptr; A0 **net/http.conn; A1 *time.Duration };
struct struct { F uintptr; A0 **net/textproto.Reader; A1 *error };
struct struct { F uintptr; A0 **net/url.URL };
struct struct { F uintptr; A0 **regexp.Regexp; A1 *string; A2 *string };
struct struct { F uintptr; A0 **regexp.onePassProg; A1 **regexp.queueOnePass; A2 *func(uint32, map[uint32]bool) bool; A3 *[][]int32 };
struct struct { F uintptr; A0 **regexp.onePassProg; A1 *func(uint32, *regexp.queueOnePass) };
struct struct { F uintptr; A0 **runtime.pollDesc };
struct struct { F uintptr; A0 *[][]int };
struct struct { F uintptr; A0 *[][]uint8; A1 *[]uint8 };
struct struct { F uintptr; A0 *[]compress/flate.literalNode };
struct struct { F uintptr; A0 *[]string; A1 *string };
struct struct { F uintptr; A0 *[]uint8 };
struct struct { F uintptr; A0 *[]uint8; A1 **runtime.g; A2 *uintptr; A3 *uintptr; A4 *bool; A5 *int };
struct struct { F uintptr; A0 *[]uint8; A1 *[][][]uint8 };
struct struct { F uintptr; A0 *bool };
struct struct { F uintptr; A0 *bool; A1 *[]int32; A2 *[]uint32 };
struct struct { F uintptr; A0 *bool; A1 *net/http.Header; A2 *map[string]bool };
struct struct { F uintptr; A0 *chan []uint8 };
struct struct { F uintptr; A0 *chan bool };
struct struct { F uintptr; A0 *chan bool; A1 *bool; A2 **net/http.persistConn };
struct struct { F uintptr; A0 *chan error };
struct struct { F uintptr; A0 *chan net/http.dialRes·2; A1 **net/http.Transport };
struct struct { F uintptr; A0 *chan struct {} };
struct struct { F uintptr; A0 *error };
struct struct { F uintptr; A0 *error; A1 **mime/multipart.Form };
struct struct { F uintptr; A0 *func([]uint8) []uint8; A1 *[]uint8 };
struct struct { F uintptr; A0 *func(string) string; A1 *string };
struct struct { F uintptr; A0 *int32; A1 *uintptr; A2 **runtime.pollDesc };
struct struct { F uintptr; A0 *int; A1 *[]int32; A2 *[]uint32 };
struct struct { F uintptr; A0 *int; A1 *[]uint8; A2 *bool };
struct struct { F uintptr; A0 *int; A1 *string };
struct struct { F uintptr; A0 *int; A1 *uintptr; A2 *uintptr; A3 *int; A4 **uintptr; A5 *int };
struct struct { F uintptr; A0 *string };
struct struct { F uintptr; A0 *string; A1 *[][]string };
struct struct { F uintptr; A0 *string; A1 *[]uint8; A2 **regexp.Regexp; A3 *[]uint8 };
struct struct { F uintptr; A0 *string; A1 *chan net.racer·2 };
struct struct { F uintptr; A0 *string; A1 *int; A2 *string };
struct struct { F uintptr; A0 *string; A1 *string; A2 **net.Dialer; A3 *net.addrList };
struct struct { F uintptr; A0 *string; A1 *string; A2 **net.Dialer; A3 *net.netaddr };
struct struct { F uintptr; A0 *string; A1 *string; A2 *net.Addr; A3 *time.Time; A4 *chan bool; A5 *chan net.racer·1 };
struct struct { F uintptr; A0 *string; A1 *string; A2 *string };
struct struct { F uintptr; A0 *sync.Mutex; A1 *net/http.canceler·1; A2 **net/http.Request };
struct struct { F uintptr; A0 *sync.WaitGroup; A1 *encoding/json.encoderFunc };
struct struct { F uintptr; A0 *time.Duration; A1 *<-chan chan struct {}; A2 *string; A3 *time.Time };
struct struct { F uintptr; A0 *uintptr; A1 *uintptr; A2 **runtime.g };
struct struct { F uintptr; R *crypto/tls.Config };
struct struct { F uintptr; R *encoding/json.arrayEncoder };
struct struct { F uintptr; R *encoding/json.condAddrEncoder };
struct struct { F uintptr; R *encoding/json.mapEncoder };
struct struct { F uintptr; R *encoding/json.ptrEncoder };
struct struct { F uintptr; R *encoding/json.sliceEncoder };
struct struct { F uintptr; R *encoding/json.structEncoder };
struct struct { F uintptr; R *net.Dialer };
struct struct { F uintptr; R *net/http.envOnce };
struct struct { F uintptr; R *net/http.persistConn };
struct struct { F uintptr; R encoding/json.floatEncoder };
struct struct { Size uint32; Mallocs uint64; Frees uint64 };
struct struct { a crypto/tls.alert; b string };
struct struct { a int; b string };
struct struct { a net/http.ConnState; b string };
struct struct { a string; b bool };
struct struct { a string; b float64 };
struct struct { a string; b int };
struct struct { a string; b string };
struct struct { addr uintptr; len int; cap int };
struct struct { algo crypto/x509.SignatureAlgorithm; oid encoding/asn1.ObjectIdentifier; pubKeyAlgo crypto/x509.PublicKeyAlgorithm; hash crypto.Hash };
struct struct { b bool; x interface {} };
struct struct { ch chan struct {}; mu sync.RWMutex; dnsConfig *net.dnsConfig; dnserr error };
struct struct { elem *uint8; chan *uint8; pc uintptr; kind uint16; so uint16; receivedp *uint8; releasetime uint64 };
struct struct { entry [4]runtime.cpuprofEntry };
struct struct { extKeyUsage crypto/x509.ExtKeyUsage; oid encoding/asn1.ObjectIdentifier };
struct struct { io.Reader; io.Closer };
struct struct { items_data []gopkg.in/yaml%2ev2.yaml_node_item_t; style gopkg.in/yaml%2ev2.yaml_sequence_style_t };
struct struct { laddr net.TCPAddr; value int; ok bool };
struct struct { lock runtime.mutex; gp *runtime.g; created bool; sleeping bool; rescheduling bool; waitnote runtime.note; t []*runtime.timer };
struct struct { lock runtime.mutex; pos unsafe.Pointer; end unsafe.Pointer };
struct struct { n uint64; ret unsafe.Pointer };
struct struct { net/http.eofReaderWithWriteTo; io.Closer };
struct struct { note runtime.note; mask [1]uint32; wanted [1]uint32; recv [1]uint32; state uint32; inuse bool };
struct struct { pairs_data []gopkg.in/yaml%2ev2.yaml_node_pair_t; pairs_start *gopkg.in/yaml%2ev2.yaml_node_pair_t; pairs_end *gopkg.in/yaml%2ev2.yaml_node_pair_t; pairs_top *gopkg.in/yaml%2ev2.yaml_node_pair_t; style gopkg.in/yaml%2ev2.yaml_mapping_style_t };
struct struct { root runtime.semaRoot; pad [32]uint8 };
struct struct { sync.Mutex; byName map[string][]string; byAddr map[string][]string; expire time.Time; path string };
struct struct { sync.Mutex; table [64]math/big.divisor };
struct struct { sync.RWMutex; m map[*reflect.rtype]*reflect.ptrType };
struct struct { sync.RWMutex; m map[reflect.Type][]encoding/json.field };
struct struct { sync.RWMutex; m map[reflect.Type]encoding/json.encoderFunc };
struct struct { sync.RWMutex; m map[reflect.layoutKey]reflect.layoutType };
struct struct { tcase uint16; ncase uint16; pollorder *uint8; lockorder *uint8; scase [2]struct { elem *uint8; chan *uint8; pc uintptr; kind uint16; so uint16; receivedp *uint8; releasetime uint64 }; lockorderarr [2]*uint8; pollorderarr [2]uint16 };
struct struct { tcase uint16; ncase uint16; pollorder *uint8; lockorder *uint8; scase [3]struct { elem *uint8; chan *uint8; pc uintptr; kind uint16; so uint16; receivedp *uint8; releasetime uint64 }; lockorderarr [3]*uint8; pollorderarr [3]uint16 };
struct struct { tcase uint16; ncase uint16; pollorder *uint8; lockorder *uint8; scase [5]struct { elem *uint8; chan *uint8; pc uintptr; kind uint16; so uint16; receivedp *uint8; releasetime uint64 }; lockorderarr [5]*uint8; pollorderarr [5]uint16 };
struct struct { v interface {}; tag string; l []string };
struct struct { value []uint8; length int; style gopkg.in/yaml%2ev2.yaml_scalar_style_t };
struct struct {};
struct sudog<*net/http.persistConn>;
struct sudog<[]uint8>;
struct sudog<bool>;
struct sudog<chan struct {}>;
struct sudog<error>;
struct sudog<net.racer·1>;
struct sudog<net.racer·2>;
struct sudog<net.singleflightResult>;
struct sudog<net/http.dialRes·2>;
struct sudog<net/http.requestAndChan>;
struct sudog<net/http.responseAndError>;
struct sudog<net/http.writeRequest>;
struct sudog<struct {}>;
struct sudog<time.Time>;
typedef struct sync.Cond sync.Cond;
typedef struct runtime.iface sync.Locker;
struct sync.Mutex;
struct sync.Once;
struct sync.Pool;
struct sync.RWMutex;
typedef struct sync.WaitGroup sync.WaitGroup;
typedef sync.copyChecker;
struct sync.poolLocal;
typedef struct sync.rlocker sync.rlocker;
struct sync.syncSema;
typedef syscall.Errno;
typedef struct syscall.IfData syscall.IfData;
struct syscall.IfMsghdr;
typedef struct syscall.IfaMsghdr syscall.IfaMsghdr;
typedef struct syscall.IfmaMsghdr2 syscall.IfmaMsghdr2;
struct syscall.InterfaceAddrMessage;
typedef struct syscall.InterfaceMessage syscall.InterfaceMessage;
typedef struct syscall.InterfaceMulticastAddrMessage syscall.InterfaceMulticastAddrMessage;
struct syscall.Iovec;
typedef struct syscall.Linger syscall.Linger;
typedef struct syscall.Msghdr syscall.Msghdr;
typedef struct syscall.RawSockaddr syscall.RawSockaddr;
struct syscall.RawSockaddrAny;
struct syscall.RawSockaddrDatalink;
typedef struct syscall.RawSockaddrInet4 syscall.RawSockaddrInet4;
typedef struct syscall.RawSockaddrInet6 syscall.RawSockaddrInet6;
typedef struct syscall.RawSockaddrUnix syscall.RawSockaddrUnix;
typedef struct syscall.RouteMessage syscall.RouteMessage;
typedef struct runtime.iface syscall.RoutingMessage;
struct syscall.RtMetrics;
typedef struct syscall.RtMsghdr syscall.RtMsghdr;
typedef syscall.Signal;
typedef struct runtime.iface syscall.Sockaddr;
typedef struct syscall.SockaddrDatalink syscall.SockaddrDatalink;
typedef struct syscall.SockaddrInet4 syscall.SockaddrInet4;
typedef struct syscall.SockaddrInet6 syscall.SockaddrInet6;
struct syscall.SockaddrUnix;
typedef struct syscall.Stat_t syscall.Stat_t;
struct syscall.Timespec;
struct syscall.Timeval32;
typedef syscall._C_int;
typedef syscall._Socklen;
struct syscall.anyMessage;
typedef struct syscall.mmapper syscall.mmapper;
typedef time.Duration;
typedef struct time.Location time.Location;
typedef time.Month;
typedef struct time.ParseError time.ParseError;
struct time.Time;
typedef struct time.Timer time.Timer;
typedef time.Weekday;
struct time.data;
typedef struct time.runtimeTimer time.runtimeTimer;
struct time.zone;
typedef struct time.zoneTrans time.zoneTrans;
typedef uint;
typedef uint16;
typedef uint32;
typedef uint64;
typedef uint8;
typedef uintptr;
struct unicode.CaseRange;
typedef struct unicode.Range16 unicode.Range16;
struct unicode.Range32;
typedef struct unicode.RangeTable unicode.RangeTable;
typedef unicode.d unicode.d;
typedef struct unicode.foldPair unicode.foldPair;
struct waitq<*net/http.persistConn>;
struct waitq<[]uint8>;
struct waitq<bool>;
struct waitq<chan struct {}>;
struct waitq<error>;
struct waitq<net.racer·1>;
struct waitq<net.racer·2>;
struct waitq<net.singleflightResult>;
struct waitq<net/http.dialRes·2>;
struct waitq<net/http.requestAndChan>;
struct waitq<net/http.responseAndError>;
struct waitq<net/http.writeRequest>;
struct waitq<struct {}>;
struct waitq<time.Time>;
